trigger:
- master
- devel
- feature-parametrize

jobs:
- job: macOS_Test
  pool:
    vmImage: 'macOS-latest'
  strategy:
    matrix:
      Python37:
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - script: |
      sudo chown -R $USER $CONDA
      $CONDA/bin/conda create -y -q -n testenv python=$(python.version)
    displayName: "Create Conda environment"

  - script: |
      /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      brew install gromacs
      brew cask install firefox
      brew cask install chromedriver
    displayName: "Install Homebrew, GROMACS, firefox and chromedriver"

  - script: |
      source $CONDA/bin/activate testenv
      cd $(Build.SourcesDirectory)
      $CONDA/bin/conda install -y conda-build anaconda-client

      if [ $(Build.SourceBranchName) == "master" ]
      then
        $CONDA/bin/conda build conda-recipe/meta.yaml -c conda-forge -c omnia -c michellab --token $(anacondaToken) --user essexlab
      else
        $CONDA/bin/conda build conda-recipe/meta.yaml -c conda-forge -c omnia -c michellab --token $(anacondaToken) --user essexlab --label dev
      fi

      if [ $(Build.SourceBranchName) == "master" ]
      then
        $CONDA/bin/conda install -y -c conda-forge -c omnia -c michellab -c essexlab protocaller
      else
        $CONDA/bin/conda install -y -c conda-forge -c omnia -c michellab -c essexlab/label/dev protocaller
      fi

      python -m pip install --upgrade pip
      pip install pytest pytest-azurepipelines
    displayName: 'Install ProtoCaller'

  - script: |
      source $CONDA/bin/activate testenv
      python -m pytest test/
    displayName: 'Test ProtoCaller'

- job: Ubuntu_Test
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python37:
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - script: |
      sudo apt-get -y install gromacs
      echo "##vso[task.prependpath]$CONDA/bin"
      conda create -y -q -n testenv python=$(python.version)
    displayName: "Create Conda environment and install GROMACS"

  - script: |
      echo "##vso[task.prependpath]$CONDA/bin"
      source activate testenv
      cd $(Build.SourcesDirectory)
      conda install -y conda-build anaconda-client

      if [ $(Build.SourceBranchName) == "master" ]
      then
        conda build conda-recipe/meta.yaml -c conda-forge -c omnia -c michellab --token $(anacondaToken) --user essexlab
      else
        conda build conda-recipe/meta.yaml -c conda-forge -c omnia -c michellab --token $(anacondaToken) --user essexlab --label dev
      fi

      if [ $(Build.SourceBranchName) == "master" ]
      then
        conda install -y -c conda-forge -c omnia -c michellab -c essexlab protocaller
      else
        conda install -y -c conda-forge -c omnia -c michellab -c essexlab/label/dev protocaller
      fi

      python -m pip install --upgrade pip
      pip install pytest pytest-azurepipelines
    displayName: 'Install ProtoCaller'

  - script: |
      echo "##vso[task.prependpath]$CONDA/bin"
      source activate testenv
      python -m pytest test/
    displayName: 'Test ProtoCaller'